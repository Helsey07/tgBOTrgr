import asyncio
import os
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, StateFilter
import asyncpg
from aiogram.types import BotCommand, BotCommandScopeDefault
import datetime
import re
import requests

#–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞

bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=bot_token)
storage = MemoryStorage()

#–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ —Ä–æ—É—Ç–æ–≤

dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

async def connect_to_db():
    connection = await asyncpg.connect(
        host='127.0.0.1',
        port='5432',
        database='tgbot',
        user='postgres',
        password='egor2003'
    )
    return connection

#–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM

class StatesBot(StatesGroup):
    login_entry_for_reg = State()

    money = State()
    date = State()

    SelectButton = State()

    operationIdentifier = State()
    replacementAmount = State()

kb = [
    [types.KeyboardButton(text='–î–û–•–û–î')],
    [types.KeyboardButton(text='–†–ê–°–•–û–î')],
]
keyboard = types.ReplyKeyboardMarkup(keyboard=kb)

kb2 = [
    [types.KeyboardButton(text='RUB')],
    [types.KeyboardButton(text='EUR')],
    [types.KeyboardButton(text='USD')],
]
keyboard2 = types.ReplyKeyboardMarkup(keyboard=kb2)

comands = [
    BotCommand(command='/reg', description='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'),
    BotCommand(command='/add_operation', description='–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏'),
    BotCommand(command='/operations', description='–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–ø–µ—Ä–∞—Ü–∏–π'),
    BotCommand(command='/update_operation', description='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É–ø–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–∏')
]

#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_command(message: types.Message):
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –ì–ê–ù–°–¢–ï–†! –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–æ–º–∞–Ω–¥—É")
#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reg
@router.message(Command("reg"))
async def reg(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    print(user_id)

    connection = await connect_to_db()
    result = await connection.fetchval("SELECT * FROM users WHERE id = $1", user_id)

    if result:
        await message.answer("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ü§¨")
        await state.clear()
    else:
        await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –ª–æ–≥–∏–Ω  üëÄ")
        await state.set_state(StatesBot.login_entry_for_reg)
    await connection.close()

@router.message(StateFilter(StatesBot.login_entry_for_reg))
async def set_currency_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    user_id = message.from_user.id

    connection = await connect_to_db()
    availabilityLogin = await connection.fetchrow("SELECT * FROM users WHERE name = $1", name)

    if availabilityLogin:
        await message.answer("–õ–æ–Ω–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç... –ü—Ä–∏–¥—É–º–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ü§¨")
    else:
        await connection.fetchrow("INSERT INTO users (id, name) VALUES ($1, $2)", user_id, name)
        await message.answer("–¢–µ–ø–µ—Ä—å —Ç—ã —Å –Ω–∞–º–∏!!!!  ü§™")
        await state.clear()
    await connection.close()
# ___________________________________________________________________________________________________________________
#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_operation

@router.message(Command("add_operation"))
async def add_operation(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    connection = await connect_to_db()
    result = await connection.fetchval("SELECT * FROM users WHERE id = $1", user_id)

    if not result:
        await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ü§¨")
    else:
        await message.answer("–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é", reply_markup=keyboard)

    await connection.close()

@router.message(F.text == '–†–ê–°–•–û–î')
async def add_operation(message: types.Message, state: FSMContext):
    operation_type = message.text.strip()
    user_id = message.from_user.id
    if operation_type:
        await message.answer("–í–≤–µ–¥–∏ —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ä—É–±–ª—è—Ö")
        await state.update_data(operation_type=operation_type)
        await state.set_state(StatesBot.money)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")

@router.message(F.text == '–î–û–•–û–î')
async def add_operation(message: types.Message, state: FSMContext):
    operation_type = message.text.strip()
    user_id = message.from_user.id
    if operation_type:
        await message.answer("–í–≤–µ–¥–∏ —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ä—É–±–ª—è—Ö")
        await state.update_data(operation_type=operation_type)
        await state.set_state(StatesBot.money)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")

@router.message(StateFilter(StatesBot.money))
async def money(message: types.Message, state: FSMContext):
    try:
        print('–°–æ—Å—Ç–æ—è–Ω–∏–µ money')
        money = float(message.text.strip())
        await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É")
        await state.update_data(amount=money)
        await state.set_state(StatesBot.date)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ä—É–±–ª—è—Ö (—á–∏—Å–ª–æ)")

@router.message(StateFilter(StatesBot.date))
async def date(message: types.Message, state: FSMContext):
    date_str = message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ)
    if re.match(r'\d{2}\.\d{2}\.\d{4}', date_str):
        try:
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç datetime
            date = datetime.datetime.strptime(date_str, '%d.%m.%Y')

            await state.update_data(date=date)
            data = await state.get_data()

            operation_type = data.get('operation_type')  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
            amount = data.get('amount')
            date = data.get('date')
            user_id = message.from_user.id
            try:
                print('–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
                connection = await connect_to_db()
                await connection.fetchrow(
                    "INSERT INTO operations (date, sum, chat_id, type_operation) VALUES ($1, $2, $3, $4)",
                    date, amount, user_id, operation_type)
                await message.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ")
                await state.clear()
                await connection.close()
            except Exception:
                await message.answer("–ß–û –¢–û –ü–û–®–õ–û –ù–ï –¢–ê–ö")
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì1")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì2")
# ___________________________________________________________________________________________________________________
async def get_exchange_rate(currency: str) -> float:
    try:
        url = f'http://195.58.54.159:8000/rate?currency={currency}'
        response = requests.get(url)
        data = response.json()
        if response.status_code == 200:
            return data['rate']
        elif response.status_code == 400:
            print(f"–û—à–∏–±–∫–∞: {data['message']}")
        elif response.status_code == 500:
            print(f"–û—à–∏–±–∫–∞: {data['message']}")
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –æ–±–º–µ–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞: {e}')
    return None

#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /operations
@router.message(Command("operations"))
async def operations(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    connection = await connect_to_db()
    result = await connection.fetchval("SELECT * FROM users WHERE id = $1", user_id)

    if not result:
        await message.answer("–¢–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        await state.clear()
    else:
        await message.answer("–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é", reply_markup=keyboard2)
        await state.set_state(StatesBot.SelectButton)
    await connection.close()

@router.message(F.text == 'RUB')
async def rub_operation(message: types.Message, state: FSMContext):
    currency = message.text.strip()
    user_id = message.from_user.id

    connection = await connect_to_db()
    results = await connection.fetch("SELECT * FROM operations WHERE chat_id = $1", user_id)
    if not results:
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        rows_text = "\n".join([f"ID: {row['id']}; –î–∞—Ç–∞: {row['date']}; –°—É–º–º–∞: {row['sum']} {currency}; "
                               f"–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {row['type_operation']}" for row in results])
        await message.answer(rows_text)
    await connection.close()

@router.message(F.text == 'USD')
async def usd_operation(message: types.Message, state: FSMContext):
    currency = message.text.strip()
    amount_currensy = await get_exchange_rate(currency)
    user_id = message.from_user.id

    connection = await connect_to_db()
    results = await connection.fetch("SELECT * FROM operations WHERE chat_id = $1", user_id)

    if not results:
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        await message.answer(f"–ö—É—Ä—Å {currency} –Ω—ã–Ω—á–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {amount_currensy}")
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        rows_text = "\n".join([f"ID: {row['id']}; –î–∞—Ç–∞: {row['date']}; –°—É–º–º–∞: {round(float(row['sum'])/amount_currensy, 2)} {currency}; "
                               f"–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {row['type_operation']}" for row in results])
        await message.answer(rows_text)
    await connection.close()


@router.message(F.text == 'EUR')
async def eur_operation(message: types.Message, state: FSMContext):
    currency = message.text.strip()
    amount_currensy = await get_exchange_rate(currency)
    user_id = message.from_user.id

    connection = await connect_to_db()
    results = await connection.fetch("SELECT * FROM operations WHERE chat_id = $1", user_id)

    if not results:
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        await message.answer(f"–ö—É—Ä—Å {currency} –Ω—ã–Ω—á–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {amount_currensy}")
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        rows_text = "\n".join([f"ID: {row['id']}; –î–∞—Ç–∞: {row['date']}; –°—É–º–º–∞: {round(float(row['sum'])/amount_currensy, 2)} {currency}; "
                               f"–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {row['type_operation']}" for row in results])
        await message.answer(rows_text)
    await connection.close()
# ___________________________________________________________________________________________________________________

# ___________________________________________________________________________________________________________________
@router.message(Command("update_operation"))
async def update_operation(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    connection = await connect_to_db()
    result = await connection.fetchval("SELECT * FROM users WHERE id = $1", user_id)

    if not result:
        await message.answer("–¢–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        await state.clear()
    else:
        await message.answer("–í–≤–µ–¥–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏")
        await state.set_state(StatesBot.operationIdentifier)
    await connection.close()

@router.message(StateFilter(StatesBot.operationIdentifier))
async def operationIdentifier(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    try:
        operationIdentifier = int(message.text.strip())
        connection = await connect_to_db()
        result = await connection.fetchval("SELECT * FROM operations WHERE id = $1 and chat_id=$2", operationIdentifier,
                                       user_id)
        await connection.close()

        if result:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å')
            await state.update_data(operationIdentifier=operationIdentifier)
            await state.set_state(StatesBot.replacementAmount)
        else:
            await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∏–Ω–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä.')
    except:
        await message.answer('–í–≤–µ–¥–µ–Ω–æ –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')


@router.message(StateFilter(StatesBot.replacementAmount))
async def replacementAmount(message: types.Message, state: FSMContext):
    try:
        replacementAmount = float(message.text.strip())

        data = await state.get_data()
        operationIdentifier = data.get('operationIdentifier')
        try:
            connection = await connect_to_db()
            result = await connection.fetchval("UPDATE operations SET sum=$1 WHERE id=$2",
                                               replacementAmount,
                                               operationIdentifier)
            await message.answer('–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
            await connection.close()
            await state.clear()
        except:
            await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')
    except:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ')
# ___________________________________________________________________________________________________________________
async def main():
    await bot.set_my_commands(comands, scope=BotCommandScopeDefault())

    await dp.start_polling(bot)


asyncio.run(main())