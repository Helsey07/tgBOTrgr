
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter

from DB.connect_db import connect_to_db
from State.states import StatesBot
from KeyBoard.keyboard import keyboard

router = Router()
connection = connect_to_db()
#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_command(message: types.Message):
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –ì–ê–ù–°–¢–ï–†! –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–æ–º–∞–Ω–¥—É")

#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reg
@router.message(Command("reg"))
async def reg(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    print(user_id)

    connection = await connect_to_db()
    result = await connection.fetchval("SELECT * FROM users WHERE id = $1", user_id)

    if result:
        await message.answer("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ü§¨")
        await state.clear()
    else:
        await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –ª–æ–≥–∏–Ω  üëÄ")
        await state.set_state(StatesBot.login_entry_for_reg)
    await connection.close()

@router.message(StateFilter(StatesBot.login_entry_for_reg))
async def set_currency_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    user_id = message.from_user.id

    connection = await connect_to_db()
    availabilityLogin = await connection.fetchrow("SELECT * FROM users WHERE name = $1", name)

    if availabilityLogin:
        await message.answer("–õ–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç... –ü—Ä–∏–¥—É–º–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ü§¨")
    else:
        await connection.fetchrow("INSERT INTO users (id, name) VALUES ($1, $2)", user_id, name)
        await message.answer("–¢–µ–ø–µ—Ä—å —Ç—ã —Å –Ω–∞–º–∏!!!!  ü§™")
        await state.clear()
    await connection.close()
# ___________________________________________________________________________________________________________________
#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_operation

@router.message(Command("add_operation"))
async def add_operation(message: types.Message):
    user_id = message.from_user.id

    connection = await connect_to_db()
    result = await connection.fetchval("SELECT * FROM users WHERE id = $1", user_id)

    if not result:
        await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ü§¨")
    else:
        await message.answer("–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é", reply_markup=keyboard)

    await connection.close()

@router.message(Command("update_operation"))
async def update_operation(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    connection = await connect_to_db()
    result = await connection.fetchval("SELECT * FROM users WHERE id = $1", user_id)

    if not result:
        await message.answer("–¢–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        await state.clear()
    else:
        await message.answer("–í–≤–µ–¥–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏")
        await state.set_state(StatesBot.operationIdentifier)
    await connection.close()

@router.message(StateFilter(StatesBot.operationIdentifier))
async def operationIdentifier(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    try:
        operationIdentifier = int(message.text.strip())
        connection = await connect_to_db()
        result = await connection.fetchval("SELECT * FROM operations WHERE id = $1 and chat_id=$2", operationIdentifier,
                                       user_id)
        await connection.close()

        if result:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å')
            await state.update_data(operationIdentifier=operationIdentifier)
            await state.set_state(StatesBot.replacementAmount)
        else:
            await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∏–Ω–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä.')
    except:
        await message.answer('–í–≤–µ–¥–µ–Ω–æ –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')


@router.message(StateFilter(StatesBot.replacementAmount))
async def replacementAmount(message: types.Message, state: FSMContext):
    try:
        replacementAmount = float(message.text.strip())

        data = await state.get_data()
        operationIdentifier = data.get('operationIdentifier')
        try:
            connection = await connect_to_db()
            await connection.fetchval("UPDATE operations SET sum=$1 WHERE id=$2",
                                               replacementAmount,
                                               operationIdentifier)
            await message.answer('–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
            await connection.close()
            await state.clear()
        except:
            await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')
    except:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ')